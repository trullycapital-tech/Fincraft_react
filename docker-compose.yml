version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: fincraft-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: fincraft123
      MONGO_INITDB_DATABASE: fincraft
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - fincraft-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fincraft-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8001
      MONGODB_URI: mongodb://admin:fincraft123@mongodb:27017/fincraft?authSource=admin
      JWT_SECRET: your_super_secure_jwt_secret_key_change_this_in_production
      JWT_EXPIRE: 24h
      DEMO_MODE: true
      CORS_ORIGIN: https://msmeloanconsultant.com,http://localhost:3000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      BCRYPT_SALT_ROUNDS: 12
      MAX_FILE_SIZE: 5MB
      UPLOAD_PATH: ./uploads
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASS: ${EMAIL_PASS:-}
    ports:
      - "8001:8001"
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - fincraft-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fincraft-frontend
    restart: unless-stopped
    environment:
      REACT_APP_BACKEND_URL: http://localhost:8001
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fincraft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session management (optional)
  redis:
    image: redis:7-alpine
    container_name: fincraft-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fincraft-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  backend_uploads:
    driver: local
  redis_data:
    driver: local

networks:
  fincraft-network:
    driver: bridge